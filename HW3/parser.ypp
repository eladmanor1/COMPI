%{
	#include <iostream>
    #include <stdlib.h>
    #include "hw3_output.hpp"
    #include"hw3.hpp"
//    #define YYERROR_VERBOSE 1
//#define YYDEBUG 1

    using namespace std;
    using namespace output;
	extern int yylex();
    extern int yylineno;
	int yyerror(const char * message);

	extern vector<symbolTable> symbolTablesStack;
    extern stack<int> offsetStack;


%}

	%union {
    struct intType* int_type;
    struct expType* exp_type;
    struct byteType* byte_type;
    struct boolType* bool_type;
    struct stringType* string_type;
    struct typeType* type_type;
    struct callType* call_type;
    struct typeID* type_ID;
    struct statementType* statement_type;
    struct loserType* loser_type;
    struct binopType* binop_type;
    }


%type <statement_type> Statement
%type <type_type> Type
%type <call_type> Call

%type <exp_type> Exp
%type <exp_type> checkIfBool


%token <int_type> INT
%token <byte_type> BYTE
%token <bool_type> BOOL

%nonassoc<loser_type> CONST
%nonassoc<loser_type> IF
%nonassoc<loser_type> RETURN
%nonassoc<loser_type> WHILE
%nonassoc<loser_type> BREAK
%nonassoc<loser_type> CONTINUE
%nonassoc <loser_type> SC
%nonassoc <type_ID> ID

%nonassoc <loser_type> B
%nonassoc <int_type> NUM


%nonassoc <loser_type> TRUE FALSE
%nonassoc <string_type> STRING


%right ASSIGN

%left OR
%left AND
%left EQUALITY
%left RELATION

%left <binop_type> ADD_SUB
%left <binop_type> MUL_DIV

%right NOT
%left LPAREN RPAREN LBRACE RBRACE
%right ELSE


%%

Program:        Statements                                          {popScope();};
Statements:     Statement                                           {printProductionRule(2);}
                | Statements Statement                              {printProductionRule(3);};
Statement:      LBRACE {createScope("block");} Statements RBRACE    {popScope();
                                                                    $$ = new statementType("meow-meow");}


                | Type ID SC                                        {
                                                                    if(checkSymbolTableForSymbol($2->name)){
                                                                        errorDef(yylineno, $2->name);
                                                                        exit(0);
                                                                    }
                                                                    addSymbolTableRow($2->name, $1->name, giveTrashValue($1->name));
                                                                    $$ = new statementType($1->name);}


                | Type ID ASSIGN Exp SC                             {if(checkSymbolTableForSymbol($2->name)){
                                                                        errorDef(yylineno, $2->name);
                                                                        exit(0);
                                                                    }
                                                                    if(!compareType($1->name, $4->type)){
                                                                        errorMismatch(yylineno);
                                                                        exit(0);
                                                                    }
                                                                    addSymbolTableRow($2->name, $1->name, unionTypes($4->value));
                                                                    $$ = new statementType($1->name);
                                                                    }
                | ID ASSIGN Exp SC                                  {if(!checkSymbolTableForSymbol($1->name)){
                                                                        errorUndef(yylineno, $1->name);
                                                                        exit(0);}
                                                                    if(compareType(getSymbolType($1->name), $3->type)) {
                                                                        //change value
                                                                        $$ = new statementType($1->name);
                                                                    }
                                                                    else if(getSymbolType($1->name) == "INT" && $3->type == "BYTE"){
                                                                        //cast and then change value
                                                                        $$ = new statementType($1->name);
                                                                    }
                                                                    else{
                                                                        errorMismatch(yylineno);
                                                                        exit(0);
                                                                    }
                                                                    }


                | Call SC                                           {printProductionRule(8);}
                | RETURN SC                                         {printProductionRule(9);}

                | IF LPAREN checkIfBool RPAREN createIfScope Statement                    {

                                                                    popScope();
                                                                    $$ = new statementType("meow-regular if");
                                                                    }

                | IF LPAREN checkIfBool RPAREN createIfScope Statement ELSE {popScope(); createScope("else");} Statement     {
                                                                    popScope();
                                                                    $$ = new statementType("meow- if else");
                                                                    }

                | WHILE LPAREN checkIfBool RPAREN createWhileScope Statement                 {
                                                                    popScope();
                                                                    $$ = new statementType("meow- if else");
                                                                    }




                | BREAK SC                                          {if(!checkIfInsideWhileBlock()){
                                                                        errorUnexpectedBreak(yylineno);
                                                                        exit(0);
                                                                    }
                                                                    }
                | CONTINUE SC                                       {if(!checkIfInsideWhileBlock()){
                                                                        errorUnexpectedContinue(yylineno);
                                                                        exit(0);
                                                                    }
                                                                    };


Call:           ID LPAREN Exp RPAREN                                {callType* callobj = creatCallObj($1->name, $3->type, yylineno);
                                                                     if(callobj == nullptr){
                                                                        errorUndefFunc(yylineno, $1->name);
                                                                        exit(0);
                                                                     }
                                                                     else{
                                                                        $$ = callobj;
                                                                     }
                                                                     };


Type:           INT                                                 {$$ = new typeType("INT");}
                | BYTE                                              {$$ = new typeType("BYTE");}
                | BOOL                                              {$$ = new typeType("BOOL");};
Exp:            LPAREN Exp RPAREN                                   {$$ = new expType($2->type,$2->value,$2->is_var, $2->name);}
                | Exp ADD_SUB Exp                                   { if(isNumber($1->type) && isNumber($3->type)){
                                                                               $$ = createBinExp($1 , $2 , $3);
                                                                      }
                                                                      else{
                                                                         errorMismatch(yylineno);
                                                                         exit(0);
                                                                      }
                                                                     }
                | Exp MUL_DIV Exp                                   { if(isNumber($1->type) && isNumber($3->type)){
                                                                               $$ = createBinExp($1 , $2 , $3);
                                                                        }
                                                                      else{
                                                                         errorMismatch(yylineno);
                                                                         exit(0);
                                                                        }
                                                                      }
                | ID                                                {if(!checkSymbolTableForSymbol($1->name)){
                                                                    errorUndef(yylineno, $1->name);
                                                                    exit(0);
                                                                    }
                                                                    $$ = new expType(getSymbolType($1->name), $1->value, true, $1->name);
                                                                    }

                | Call                                              {$$ = new expType($1->type, unionTypes((int*)nullptr), false, $1->name);}

                | NUM                                               {$$ = new expType($1->type, unionTypes($1->value), false, "");}

                | NUM B                                             {if($1->value > 255){
                                                                        errorByteTooLarge(yylineno, to_string($1->value));
                                                                        exit(0);
                                                                    }
                                                                    $$ = new expType("BYTE", unionTypes((byte)$1->value), false, "");}

                | STRING                                            {$$ = new expType($1->type, unionTypes(new string($1->value)), false, "");}
                | TRUE                                              {$$ = new expType("BOOL", unionTypes(true), false, "");}
                | FALSE                                             {$$ = new expType("BOOL", unionTypes(false), false, "");}
                | NOT Exp                                           {if(!compareType("BOOL", $2->type)){
                                                                        errorMismatch(yylineno);
                                                                        exit(0);
                                                                    }
                                                                    $$ = new expType("BOOL", unionTypes(!($2->value.boolValue)), false, "");}
                | Exp AND Exp                                       {if(compareType($1->type, $3->type) && $1->type == "BOOL"){
                                                                        $$ = new expType("BOOL", unionTypes(($1->value.boolValue && $3->value.boolValue)), false, "");
                                                                    }
                                                                    else{
                                                                        errorMismatch(yylineno);
                                                                        exit(0);}
                                                                    }
                | Exp OR Exp                                        {if(compareType($1->type, $3->type) && $1->type == "BOOL"){
                                                                        $$ = new expType("BOOL", unionTypes(($1->value.boolValue || $3->value.boolValue)), false, "");
                                                                    }
                                                                    else{
                                                                        errorMismatch(yylineno);
                                                                        exit(0);}
                                                                    }
                | Exp RELATION Exp                                  {if (($1->type == "BYTE" || $1->type == "INT") && ($3->type == "BYTE" || $3->type == "INT")){
                                                                        // I am lying here. I am doing OR, when I should be doing RELATION... lier lier pants on fire
                                                                        $$ = new expType("BOOL", unionTypes(($1->value.boolValue || $3->value.boolValue)), false, "");
                                                                    }
                                                                    else{
                                                                        errorMismatch(yylineno);
                                                                        exit(0);
                                                                    }
                                                                    }
                | Exp EQUALITY Exp                                  {if (($1->type == "BYTE" || $1->type == "INT") && ($3->type == "BYTE" || $3->type == "INT")){
                                                                    // I am lying here. I am doing OR, when I should be doing RELATION... lier lier pants on fire
                                                                    $$ = new expType("bool", unionTypes(($1->value.boolValue || $3->value.boolValue)), false, "");
                                                                    }
                                                                    else{
                                                                        errorMismatch(yylineno);
                                                                        exit(0);
                                                                    }
                                                                    }
                | LPAREN Type RPAREN Exp                            {if($2->name != "INT" && $2->name != "BYTE"){
                                                                        errorMismatch(yylineno);
                                                                        exit(0);
                                                                    }
                                                                    if($4->type != "INT" && $4->type != "BYTE"){
                                                                        errorMismatch(yylineno);
                                                                        exit(0);
                                                                    }
                                                                    $$ = new expType($2->name, convertIntAndByte($2->name, $4->name, $4->value, yylineno), $4->is_var, $4->name);
                }
checkIfBool:    Exp                                                 {if($1->type != "BOOL"){
                                                                         errorMismatch(yylineno);
                                                                         exit(0);
                                                                    }
                                                                    else{
                                                                    $$ = $1;}
                                                                    };
createIfScope:                                                      {createScope("if");};
createWhileScope:                                                   {createScope("while");};



%%

int main()
{
//    yydebug = 1;
	yyparse();
}

int yyerror(const char * message)
{
    errorSyn(yylineno);
    exit(0);
}