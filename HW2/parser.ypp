%{
	#include <iostream>
	#include <stdlib.h>
#include "output.hpp"
    #define YYERROR_VERBOSE 1
#define YYDEBUG 1

using namespace std;
    #define YYSTYPE int
	extern int yylex();
	int yyerror(const char * message);
%}



//garbage
//%token tklp tkrp
//%token<constVal> tkconst
//%left tkor
//%left tkand


%token INT BYTE B BOOL CONST TRUE FALSE IF WHILE BREAK CONTINUE NUM STRING BINOP ASSIGN


%token ID
%token SC
%token RETURN


%left OR
%left AND
%left RELOP
%right NOT
%left LPAREN RPAREN LBRACE RBRACE
%right ELSE



//%type<exp> Exp

%%
//example
//S	:	Exp
//		{
//			cout<<"The expression's value is "<<$1.value<<endl;
//		}
//	;

Program:       Statements;
Statements:    Statement | Statements Statement;
Statement: LBRACE Statements RBRACE {printf("Noa kirrel\n");}  |
           RETURN SC;


//Exp	:	Exp tkand Exp { $$.value = $1.value && $3.value; }
//	|	Exp tkor Exp { $$.value = $1.value || $3.value; }
//	|	tklp Exp tkrp { $$ = $2; }
//	|	tkconst	{ $$.value = $1; }
//	;

%%

int main()
{
    yydebug = 1;
	yyparse();
}

int yyerror(const char * message)
{
	cout<<"Parse error: "<<message<<endl;
	exit(0);
}