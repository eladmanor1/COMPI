%{
	#include <iostream>
	#include <stdlib.h>
#include "output.hpp"
//    #define YYERROR_VERBOSE 1
//#define YYDEBUG 1

using namespace std;
using namespace output;
    #define YYSTYPE int
	extern int yylex();
	int yyerror(const char * message);
%}



//garbage
//%token tklp tkrp
//%token<constVal> tkconst
//%left tkor
//%left tkand


%token INT BYTE B BOOL CONST TRUE FALSE IF WHILE BREAK CONTINUE NUM STRING BINOP ASSIGN


%token ID
%token SC
%token RETURN


%token OR
%token AND
%token RELOP
%token NOT
%token LPAREN RPAREN LBRACE RBRACE
%right ELSE


//%type<exp> Exp

%%
//example
//S	:	Exp
//		{
//			cout<<"The expression's value is "<<$1.value<<endl;
//		}
//	;

Program:        Statements                                          {printProductionRule(1);};
Statements:     Statement                                           {printProductionRule(2);}
                | Statements Statement                              {printProductionRule(3);};
Statement:      LBRACE Statements RBRACE                            {printProductionRule(4);}
                | Type ID SC                                        {printProductionRule(5);}
                | Type ID ASSIGN Exp SC                             {printProductionRule(6);}
                | ID ASSIGN Exp SC                                  {printProductionRule(7);}
                | Call SC                                           {printProductionRule(8);}
                | RETURN SC                                         {printProductionRule(9);}
                | IF LPAREN Exp RPAREN Statement                    {printProductionRule(10);}
                | IF LPAREN Exp RPAREN Statement ELSE Statement     {printProductionRule(11);}
                | WHILE LPAREN Exp RPAREN Statement                 {printProductionRule(12);}
                | BREAK SC                                          {printProductionRule(13);}
                | CONTINUE SC                                       {printProductionRule(14);};
Call:           ID LPAREN Exp RPAREN                                {printProductionRule(15);};
Type:           INT                                                 {printProductionRule(16);}
                | BYTE                                              {printProductionRule(17);}
                | BOOL                                              {printProductionRule(18);};
Exp:            LPAREN Exp RPAREN                                   {printProductionRule(18);}

//Exp	:	Exp tkand Exp { $$.value = $1.value && $3.value; }
//	|	Exp tkor Exp { $$.value = $1.value || $3.value; }
//	|	tklp Exp tkrp { $$ = $2; }
//	|	tkconst	{ $$.value = $1; }
//	;

%%

int main()
{
//    yydebug = 1;
	yyparse();
}

int yyerror(const char * message)
{
	cout<<"Parse error: "<<message<<endl;
	exit(0);
}